// Code generated by moq; DO NOT EDIT.
// github.com/matryer/moq

package handler

import (
	"context"
	"sync"
)

// Ensure, that SentenceCreaterMock does implement SentenceCreater.
// If this is not the case, regenerate this file with moq.
var _ SentenceCreater = &SentenceCreaterMock{}

// SentenceCreaterMock is a mock implementation of SentenceCreater.
//
//	func TestSomethingThatUsesSentenceCreater(t *testing.T) {
//
//		// make and configure a mocked SentenceCreater
//		mockedSentenceCreater := &SentenceCreaterMock{
//			CreateNewSentenceFunc: func(ctx context.Context, vocabularies []string, body string) (int64, error) {
//				panic("mock out the CreateNewSentence method")
//			},
//		}
//
//		// use mockedSentenceCreater in code that requires SentenceCreater
//		// and then make assertions.
//
//	}
type SentenceCreaterMock struct {
	// CreateNewSentenceFunc mocks the CreateNewSentence method.
	CreateNewSentenceFunc func(ctx context.Context, vocabularies []string, body string) (int64, error)

	// calls tracks calls to the methods.
	calls struct {
		// CreateNewSentence holds details about calls to the CreateNewSentence method.
		CreateNewSentence []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Vocabularies is the vocabularies argument value.
			Vocabularies []string
			// Body is the body argument value.
			Body string
		}
	}
	lockCreateNewSentence sync.RWMutex
}

// CreateNewSentence calls CreateNewSentenceFunc.
func (mock *SentenceCreaterMock) CreateNewSentence(ctx context.Context, vocabularies []string, body string) (int64, error) {
	if mock.CreateNewSentenceFunc == nil {
		panic("SentenceCreaterMock.CreateNewSentenceFunc: method is nil but SentenceCreater.CreateNewSentence was just called")
	}
	callInfo := struct {
		Ctx          context.Context
		Vocabularies []string
		Body         string
	}{
		Ctx:          ctx,
		Vocabularies: vocabularies,
		Body:         body,
	}
	mock.lockCreateNewSentence.Lock()
	mock.calls.CreateNewSentence = append(mock.calls.CreateNewSentence, callInfo)
	mock.lockCreateNewSentence.Unlock()
	return mock.CreateNewSentenceFunc(ctx, vocabularies, body)
}

// CreateNewSentenceCalls gets all the calls that were made to CreateNewSentence.
// Check the length with:
//
//	len(mockedSentenceCreater.CreateNewSentenceCalls())
func (mock *SentenceCreaterMock) CreateNewSentenceCalls() []struct {
	Ctx          context.Context
	Vocabularies []string
	Body         string
} {
	var calls []struct {
		Ctx          context.Context
		Vocabularies []string
		Body         string
	}
	mock.lockCreateNewSentence.RLock()
	calls = mock.calls.CreateNewSentence
	mock.lockCreateNewSentence.RUnlock()
	return calls
}
