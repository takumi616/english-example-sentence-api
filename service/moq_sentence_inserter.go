// Code generated by moq; DO NOT EDIT.
// github.com/matryer/moq

package service

import (
	"context"
	"github.com/takumi616/generate-example/entity"
	"sync"
)

// Ensure, that SentenceInserterMock does implement SentenceInserter.
// If this is not the case, regenerate this file with moq.
var _ SentenceInserter = &SentenceInserterMock{}

// SentenceInserterMock is a mock implementation of SentenceInserter.
//
//	func TestSomethingThatUsesSentenceInserter(t *testing.T) {
//
//		// make and configure a mocked SentenceInserter
//		mockedSentenceInserter := &SentenceInserterMock{
//			InsertNewSentenceFunc: func(ctx context.Context, sentence *entity.Sentence) (int, error) {
//				panic("mock out the InsertNewSentence method")
//			},
//		}
//
//		// use mockedSentenceInserter in code that requires SentenceInserter
//		// and then make assertions.
//
//	}
type SentenceInserterMock struct {
	// InsertNewSentenceFunc mocks the InsertNewSentence method.
	InsertNewSentenceFunc func(ctx context.Context, sentence *entity.Sentence) (int, error)

	// calls tracks calls to the methods.
	calls struct {
		// InsertNewSentence holds details about calls to the InsertNewSentence method.
		InsertNewSentence []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Sentence is the sentence argument value.
			Sentence *entity.Sentence
		}
	}
	lockInsertNewSentence sync.RWMutex
}

// InsertNewSentence calls InsertNewSentenceFunc.
func (mock *SentenceInserterMock) InsertNewSentence(ctx context.Context, sentence *entity.Sentence) (int, error) {
	if mock.InsertNewSentenceFunc == nil {
		panic("SentenceInserterMock.InsertNewSentenceFunc: method is nil but SentenceInserter.InsertNewSentence was just called")
	}
	callInfo := struct {
		Ctx      context.Context
		Sentence *entity.Sentence
	}{
		Ctx:      ctx,
		Sentence: sentence,
	}
	mock.lockInsertNewSentence.Lock()
	mock.calls.InsertNewSentence = append(mock.calls.InsertNewSentence, callInfo)
	mock.lockInsertNewSentence.Unlock()
	return mock.InsertNewSentenceFunc(ctx, sentence)
}

// InsertNewSentenceCalls gets all the calls that were made to InsertNewSentence.
// Check the length with:
//
//	len(mockedSentenceInserter.InsertNewSentenceCalls())
func (mock *SentenceInserterMock) InsertNewSentenceCalls() []struct {
	Ctx      context.Context
	Sentence *entity.Sentence
} {
	var calls []struct {
		Ctx      context.Context
		Sentence *entity.Sentence
	}
	mock.lockInsertNewSentence.RLock()
	calls = mock.calls.InsertNewSentence
	mock.lockInsertNewSentence.RUnlock()
	return calls
}
