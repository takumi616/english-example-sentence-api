// Code generated by moq; DO NOT EDIT.
// github.com/matryer/moq

package service

import (
	"context"
	"github.com/takumi616/generate-example/entity"
	"sync"
)

// Ensure, that SentenceSelecterMock does implement SentenceSelecter.
// If this is not the case, regenerate this file with moq.
var _ SentenceSelecter = &SentenceSelecterMock{}

// SentenceSelecterMock is a mock implementation of SentenceSelecter.
//
//	func TestSomethingThatUsesSentenceSelecter(t *testing.T) {
//
//		// make and configure a mocked SentenceSelecter
//		mockedSentenceSelecter := &SentenceSelecterMock{
//			SelectSentenceByIdFunc: func(ctx context.Context, sentenceID int64) (entity.Sentence, error) {
//				panic("mock out the SelectSentenceById method")
//			},
//			SelectSentenceListFunc: func(ctx context.Context) ([]entity.Sentence, error) {
//				panic("mock out the SelectSentenceList method")
//			},
//		}
//
//		// use mockedSentenceSelecter in code that requires SentenceSelecter
//		// and then make assertions.
//
//	}
type SentenceSelecterMock struct {
	// SelectSentenceByIdFunc mocks the SelectSentenceById method.
	SelectSentenceByIdFunc func(ctx context.Context, sentenceID int64) (entity.Sentence, error)

	// SelectSentenceListFunc mocks the SelectSentenceList method.
	SelectSentenceListFunc func(ctx context.Context) ([]entity.Sentence, error)

	// calls tracks calls to the methods.
	calls struct {
		// SelectSentenceById holds details about calls to the SelectSentenceById method.
		SelectSentenceById []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// SentenceID is the sentenceID argument value.
			SentenceID int64
		}
		// SelectSentenceList holds details about calls to the SelectSentenceList method.
		SelectSentenceList []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
		}
	}
	lockSelectSentenceById sync.RWMutex
	lockSelectSentenceList sync.RWMutex
}

// SelectSentenceById calls SelectSentenceByIdFunc.
func (mock *SentenceSelecterMock) SelectSentenceById(ctx context.Context, sentenceID int64) (entity.Sentence, error) {
	if mock.SelectSentenceByIdFunc == nil {
		panic("SentenceSelecterMock.SelectSentenceByIdFunc: method is nil but SentenceSelecter.SelectSentenceById was just called")
	}
	callInfo := struct {
		Ctx        context.Context
		SentenceID int64
	}{
		Ctx:        ctx,
		SentenceID: sentenceID,
	}
	mock.lockSelectSentenceById.Lock()
	mock.calls.SelectSentenceById = append(mock.calls.SelectSentenceById, callInfo)
	mock.lockSelectSentenceById.Unlock()
	return mock.SelectSentenceByIdFunc(ctx, sentenceID)
}

// SelectSentenceByIdCalls gets all the calls that were made to SelectSentenceById.
// Check the length with:
//
//	len(mockedSentenceSelecter.SelectSentenceByIdCalls())
func (mock *SentenceSelecterMock) SelectSentenceByIdCalls() []struct {
	Ctx        context.Context
	SentenceID int64
} {
	var calls []struct {
		Ctx        context.Context
		SentenceID int64
	}
	mock.lockSelectSentenceById.RLock()
	calls = mock.calls.SelectSentenceById
	mock.lockSelectSentenceById.RUnlock()
	return calls
}

// SelectSentenceList calls SelectSentenceListFunc.
func (mock *SentenceSelecterMock) SelectSentenceList(ctx context.Context) ([]entity.Sentence, error) {
	if mock.SelectSentenceListFunc == nil {
		panic("SentenceSelecterMock.SelectSentenceListFunc: method is nil but SentenceSelecter.SelectSentenceList was just called")
	}
	callInfo := struct {
		Ctx context.Context
	}{
		Ctx: ctx,
	}
	mock.lockSelectSentenceList.Lock()
	mock.calls.SelectSentenceList = append(mock.calls.SelectSentenceList, callInfo)
	mock.lockSelectSentenceList.Unlock()
	return mock.SelectSentenceListFunc(ctx)
}

// SelectSentenceListCalls gets all the calls that were made to SelectSentenceList.
// Check the length with:
//
//	len(mockedSentenceSelecter.SelectSentenceListCalls())
func (mock *SentenceSelecterMock) SelectSentenceListCalls() []struct {
	Ctx context.Context
} {
	var calls []struct {
		Ctx context.Context
	}
	mock.lockSelectSentenceList.RLock()
	calls = mock.calls.SelectSentenceList
	mock.lockSelectSentenceList.RUnlock()
	return calls
}
